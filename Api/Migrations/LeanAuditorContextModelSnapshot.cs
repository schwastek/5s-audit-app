// <auto-generated />
using System;
using Api.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Migrations
{
    [DbContext(typeof(LeanAuditorContext))]
    partial class LeanAuditorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Api.Domain.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerText")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerType")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuditId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerId");

                    b.HasIndex("AuditId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = new Guid("76551e14-0791-4d3b-99fd-387e25b9c96b"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            QuestionId = new Guid("af70e9f3-9a70-4178-80dc-87d38bb1c810")
                        },
                        new
                        {
                            AnswerId = new Guid("0c24c0d3-2092-4266-ba7c-9e36c7b3256d"),
                            AnswerText = "2",
                            AnswerType = "number",
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            QuestionId = new Guid("cb1a8298-9eca-4684-8c7c-1ed24298cca2")
                        },
                        new
                        {
                            AnswerId = new Guid("dd3ae4e3-9651-4142-9a4d-63e33cad11cb"),
                            AnswerText = "3",
                            AnswerType = "number",
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            QuestionId = new Guid("6efa4fdb-b626-4af0-aea8-0a38399502d0")
                        },
                        new
                        {
                            AnswerId = new Guid("30deb494-6e45-4eb5-ab99-cc2f8eac981b"),
                            AnswerText = "4",
                            AnswerType = "number",
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            QuestionId = new Guid("bfab9a5c-4e74-4eff-a6ed-7b39748378ad")
                        },
                        new
                        {
                            AnswerId = new Guid("690da001-2594-4f64-a7d5-68b1fa095493"),
                            AnswerText = "5",
                            AnswerType = "number",
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            QuestionId = new Guid("eb2ef0b3-6af5-4d53-89d8-7b069ccb343c")
                        },
                        new
                        {
                            AnswerId = new Guid("fcaf6a07-c661-4977-bc81-ce4f0675b344"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            QuestionId = new Guid("af70e9f3-9a70-4178-80dc-87d38bb1c810")
                        },
                        new
                        {
                            AnswerId = new Guid("1939baab-b109-42b6-be49-7eee38575f69"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            QuestionId = new Guid("cb1a8298-9eca-4684-8c7c-1ed24298cca2")
                        },
                        new
                        {
                            AnswerId = new Guid("833bd0a9-2e2c-4a4d-ab7e-59597324f191"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            QuestionId = new Guid("6efa4fdb-b626-4af0-aea8-0a38399502d0")
                        },
                        new
                        {
                            AnswerId = new Guid("4d539fc1-bad0-4380-90a4-1ed9d305150b"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            QuestionId = new Guid("bfab9a5c-4e74-4eff-a6ed-7b39748378ad")
                        },
                        new
                        {
                            AnswerId = new Guid("cc0e98ee-090d-4046-af4c-7bd1e05994b9"),
                            AnswerText = "1",
                            AnswerType = "number",
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            QuestionId = new Guid("eb2ef0b3-6af5-4d53-89d8-7b069ccb343c")
                        });
                });

            modelBuilder.Entity("Api.Domain.Audit", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AuditId");

                    b.ToTable("Audits");

                    b.HasData(
                        new
                        {
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            Area = "warehouse",
                            Author = "John",
                            EndDate = new DateTime(2022, 5, 15, 17, 42, 46, 826, DateTimeKind.Utc).AddTicks(9080),
                            StartDate = new DateTime(2022, 5, 15, 17, 27, 46, 826, DateTimeKind.Utc).AddTicks(8723)
                        },
                        new
                        {
                            AuditId = new Guid("a065c86d-3846-41bf-a268-423c743ca064"),
                            Area = "assembly",
                            Author = "John",
                            EndDate = new DateTime(2022, 5, 15, 17, 39, 46, 826, DateTimeKind.Utc).AddTicks(9516),
                            StartDate = new DateTime(2022, 5, 15, 17, 27, 46, 826, DateTimeKind.Utc).AddTicks(9515)
                        });
                });

            modelBuilder.Entity("Api.Domain.AuditAction", b =>
                {
                    b.Property<Guid>("AuditActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuditId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditActionId");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditActions");

                    b.HasData(
                        new
                        {
                            AuditActionId = new Guid("33a4a3d5-54dc-4bcb-a27f-0d469f6adca4"),
                            AuditId = new Guid("f4940d26-7c0a-4ab6-b1cd-da8f708c5819"),
                            Description = "Clean up the workplace",
                            IsComplete = false
                        });
                });

            modelBuilder.Entity("Api.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("af70e9f3-9a70-4178-80dc-87d38bb1c810"),
                            QuestionText = "Are all tools in the work area currently in use?"
                        },
                        new
                        {
                            QuestionId = new Guid("cb1a8298-9eca-4684-8c7c-1ed24298cca2"),
                            QuestionText = "Are all tools or parts off the floor?"
                        },
                        new
                        {
                            QuestionId = new Guid("6efa4fdb-b626-4af0-aea8-0a38399502d0"),
                            QuestionText = "Are all posted work instructions, notes and drawing currently in use?"
                        },
                        new
                        {
                            QuestionId = new Guid("bfab9a5c-4e74-4eff-a6ed-7b39748378ad"),
                            QuestionText = "Are workstations and walkways clear of unnecessary items and clutter?"
                        },
                        new
                        {
                            QuestionId = new Guid("eb2ef0b3-6af5-4d53-89d8-7b069ccb343c"),
                            QuestionText = "Are occasionally used items stored separately?"
                        });
                });

            modelBuilder.Entity("Api.Domain.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Api.Domain.Answer", b =>
                {
                    b.HasOne("Api.Domain.Audit", null)
                        .WithMany("Answers")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Api.Domain.AuditAction", b =>
                {
                    b.HasOne("Api.Domain.Audit", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.RefreshToken", b =>
                {
                    b.HasOne("Api.Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Api.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Api.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Api.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Audit", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
